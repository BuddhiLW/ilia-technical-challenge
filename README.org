#+title: Notes on the challenge

*The deadline is 10h, 01/11/2023*

* DONE Following [[https://gitlab.com/devprodexp/nameko-devexp/-/blob/main/README-DevEnv.md][README-DevEnv]] (1)
DEADLINE: <2023-10-27 Fri> SCHEDULED: <2023-10-26 Thu>
** DONE Installation
DEADLINE: <2023-10-26 Thu> SCHEDULED: <2023-10-26 Thu>
Prerequisite:
- =conda=

You can install the dependencies and create the environment in =apt-derived= systems, like Ubuntu, running:
#+begin_src bash
bash basic-setup-and-run.bash
#+end_src

It will create the =conda= environment =nameko-devex=

#+begin_quote
To activate this environment, use

    $ conda activate nameko-devex

To deactivate an active environment, use

    $ conda deactivate
#+end_quote

Finally, the script will
- Create backings;
- Start the services;
- Run a simple test to see if everything run smoothly.

** DONE Running the services
*** DONE Initializing =script= after installation
#+begin_src shell
bash startup.sh
#+end_src

*** DONE Development

#+begin_src bash
./dev_run_backingsvcs.sh && ./dev_run.sh gateway.service orders.service products.service &
#+end_src

*** DONE Simple test
See if the project is running as supposed:

#+begin_src shell
./test/nex-smoketeSt.sh local
#+end_src
** DONE Expected output
#+ATTR_HTML: :width 800px
[[file:doc-stuff/img/expected-output.png]]

* DONE Running the application (1)
DEADLINE: <2023-10-27 Fri> SCHEDULED: <2023-10-27 Fri>
** DONE Run in debugger mode
#+ATTR_HTML: :width 800px
[[file:doc-stuff/img/running-with-debug.png]]
** DONE Performance Test (via Taurus BlazeMeter locally)
#+ATTR_HTML: :width 1000px
[[file:doc-stuff/img/performance-test.png]]

* TODO Features
DEADLINE: <2023-10-29 Sun> SCHEDULED: <2023-10-27 Fri>
** DONE Product Service
DEADLINE: <2023-10-29 Sun> SCHEDULED: <2023-10-28 Sat>
#+begin_src
2. Enhance product service
- Delete product rpc call
- Wire into smoketest.sh
- Wire into perf-test
- Wire unit-test for this method
#+end_src

*** DONE =Delete-product= rpc call (2)
In [[file:products/products/service.py][products/products/service.py]], p.38.

The idea is to receive an =id= and search it the db, then delete it.

In =gateway/gateway/service.py= - Line 77, we add a instruction sequence of steps to be followed, upon deletion call (e.g., =curl -X "DELETE"=).

It will call the method =delete=, from =products_rpc=.

If successful, the response will be to return the id from the product deleted.

#+begin_src python
@http(
    "DELETE", "/products/<string:product_id>",
    expected_exceptions=ProductNotFound
)
def delete_product(self, request, product_id):
    """Gets product by `product_id` and delete it
    """

    # ------- Delete the product
    self.products_rpc.delete(product_id)

    # Respond with the product_id -- means it was a successeful a call
    return Response(
        ProductSchema().dumps({'id': product_id}).data,
        mimetype='application/json',
        status=204
    )
#+end_src

We write the =StorageWrapper= method for the client,
#+begin_src python
def delete(self, product_id):
    product = self.client.hgetall(self._format_key(product_id))
    self.client.delete(product_id)

    if not product:
        raise NotFound('Product ID {} does not exist'.format(product_id))
    else:
        return self._from_hash(product)
#+end_src

Also, we increment the =delete= method, in the server, located in =products/products/service.py= - Line 33,
#+begin_src python
@rpc
def delete(self, product_id):
    self.storage.delete(product_id)
#+end_src

*** DONE Wire =delete-product= into [[file:test/nex-smoketest.sh][nex-smoketest.sh]] (2)
The command to smoketest is:
#+begin_src bash
./test/nex-smoketest.sh local
#+end_src

And thus we add these lines to the bash script, in order to cover deleting a product.
#+begin_src bash
# Test: Delete Product
echo "=== Deleting product ==="
curl -s -X "DELETE" "${STD_APP_URL}/products/the_odyssey"
echo
#+end_src

Returns the text: ={"id": "the_odyssey"}=.

#+ATTR_HTML: :width 500px
[[file:doc-stuff/img/product-deletion-operation.png]]

*** DONE Wire into =perf-test= (2)
DEADLINE: <2023-10-29 Sun> SCHEDULED: <2023-10-29 Sun>
#+begin_src bash
./test/nex-bzt.sh local
#+end_src

In order to insert the test case, we shall modify the =yml= file digested, in order to run the *performance tests*.

Therefore, inserting the following test-case in the file =test/nex-bzt.yml= - Line 111, does the job:

#+begin_src yaml
    # 5. Delete Product
    - url: /products/${product_id}
      label: product-delete
      think-time: uniform(0s, 0s)
      method: DELETE

      assert:
      - contains:
        - 204
        subject: http-code
        not: false
      extract-jsonpath:
        product_key: $.id
        default: NOT_FOUND

    - if: '"${order_id}" == "NOT_FOUND"'
      then:
        - action: continue
#+end_src

*** DONE Wire unit-test for this method
DEADLINE: <2023-10-29 Sun> SCHEDULED: <2023-10-29 Sun>

Add =TestDeleteProduct= class in =gateway/test/interface/test_service.py= - Line 296

#+begin_src python
class TestDeleteProduct(object):
    def test_can_delete_product(self, gateway_service, web_session):
        gateway_service.products_rpc.delete.return_value = {
            "id": "the_odyssey"
        }
        response = web_session.delete('/products/the_odyssey')
        assert response.status_code == 204
        assert gateway_service.products_rpc.delete.call_args_list == [
            call("the_odyssey")
        ]
        assert response.json() == {
            "id": "the_odyssey",
        }

    def test_product_not_found(self, gateway_service, web_session):
        gateway_service.products_rpc.delete.side_effect = (
            ProductNotFound('missing'))

        # call the gateway service to get order #1
        response = web_session.delete('/products/foo')
        assert response.status_code == 404
        payload = response.json()
        assert payload['error'] == 'PRODUCT_NOT_FOUND'
        assert payload['message'] == 'missing'
#+end_src

** TODO Orders Service
#+begin_quote
1. Enhance order service
2. List orders rpc call
3. Wire into smoketest.sh
4. Wire into perf-test
5. Wire unit-test for this method
#+end_quote
*** TODO =List-orders= rpc call
*** TODO  Wire into smoketest.sh
*** TODO Wire into perf-test
*** TODO Wire unit-test for this method
* TODO Tasks
DEADLINE: <2023-10-29 Sun> SCHEDULED: <2023-10-28 Sat>
* TODO Side-notes
DEADLINE: <2023-11-01 Wed> SCHEDULED: <2023-10-26 Thu>
** Technical exercises responses

*** Follow README-DevEnv.md to setup dev environment for exercise
#+begin_quote
- Able to run locally, debug, unit-test
- Able to smoke-test and performance test
#+end_quote

The following requirements can be seen completed in sections:
- [[*Following \[\[https://gitlab.com/devprodexp/nameko-devexp/-/blob/main/README-DevEnv.md\]\[README-DevEnv\]\]][Following README-DevEnv]]
- [[*Running the application][Running the application]]
